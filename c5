# CELL 7: Transcribe audio (convert speech in MP3 into text using Azure AI)
def transcribe_audio(file_path, speech_config):
    """
    Transcribe audio file (MP3/WAV) into text using Azure Speech Service
    """
    recognizer = speechsdk.SpeechRecognizer(
        speech_config=speech_config,
        audio_config=speechsdk.AudioConfig(filename=file_path)
    )
    done = threading.Event()
    transcript_parts = []

    def on_recognized(evt):
        if evt.result.text:
            transcript_parts.append(evt.result.text)

    def on_session_stopped(evt):
        done.set()

    def on_canceled(evt):
        print(f"ERROR: Transcription canceled: {evt.reason}")
        done.set()

    recognizer.recognized.connect(on_recognized)
    recognizer.session_stopped.connect(on_session_stopped)
    recognizer.canceled.connect(on_canceled)

    recognizer.start_continuous_recognition()
    done.wait()
    recognizer.stop_continuous_recognition()

    full_transcript = " ".join(transcript_parts).strip()
    if not full_transcript:
        raise Exception("No speech detected in audio.")

    return full_transcript







# CELL 8: MP3 Processing Pipeline
from pyspark.sql import SparkSession
import os
import time
from datetime import datetime
import pandas as pd
from pathlib import Path

spark = SparkSession.builder.getOrCreate()

def process_mp3_file(mp3_file_path):
    start_time = time.time()

    try:
        print("MP3 TRANSCRIPTION PIPELINE STARTED")

        # Step 1: Check MP3 file exists and is .mp3
        if not os.path.exists(mp3_file_path):
            raise Exception(f"MP3 file not found: {mp3_file_path}")
        if not mp3_file_path.lower().endswith('.mp3'):
            raise Exception("File must be in MP3 format")

        # Step 2: Extract file info for reporting
        file_name = Path(mp3_file_path).name
        file_size = os.path.getsize(mp3_file_path) / (1024 * 1024)  # Convert bytes to MB

        print(f"File: {file_name}")
        print(f"Size: {file_size:.2f} MB")

        # Step 3: Transcribe audio directly from MP3
        speech_config = create_azure_speech_config()
        transcript = transcribe_audio(mp3_file_path, speech_config)

        # Step 4: Prepare data for saving
        data = [[
            file_name,
            transcript,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Timestamp
        ]]
        columns = ["file_name", "transcript", "timestamp"]
        audio_df = pd.DataFrame(data, columns=columns)

        # Step 5: Create Spark DataFrame and save to Delta table
        df = spark.createDataFrame(audio_df)
        return df

    except Exception as e:
        print(f"An error occurred: {e}")
