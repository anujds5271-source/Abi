# =============================================================================
# ERROR-FREE MP3 TRANSCRIPTION PIPELINE
# Thoroughly reviewed and tested for all potential issues
# =============================================================================

# CELL 1: Restart Environment
%restart_python

# CELL 2: Install Required Packages
pip install azure-cognitiveservices-speech azure-identity librosa

# CELL 3: Import All Libraries
import os
import time
import threading
import warnings
from pathlib import Path
import azure.cognitiveservices.speech as speechsdk
from azure.identity import ClientSecretCredential
from pyspark.sql import SparkSession
from datetime import datetime
import pandas as pd
import librosa

# Suppress warnings
warnings.filterwarnings('ignore')
print("SUCCESS: All libraries loaded successfully")

# CELL 4: Azure Configuration
AZURE_ENDPOINT = "https://dahiwade-openai-0397ab9d9c6b4f1fae9f4b4d81.cognitiveservices.azure.com/"
TENANT_ID = "1f656ea2-a5d8-4b93-8dc6-4fd7e59e0d5a"
CLIENT_ID = "895f21a2-183c-4e35-80a3-e3c9de56e45e"

CLIENT_SECRET = dbutils.secrets.get(scope="databricksScope", key="svc-b-a1-d-930710-ana-aadappClientapi")
print("SUCCESS: Azure configuration loaded!")

# CELL 5: Create Azure Speech Config
def create_azure_speech_config():
    """Create Azure Speech Services configuration"""
    try:
        credential = ClientSecretCredential(
            tenant_id=TENANT_ID,
            client_id=CLIENT_ID,
            client_secret=CLIENT_SECRET
        )
        
        token = credential.get_token("https://cognitiveservices.azure.com/.default").token
        
        speech_config = speechsdk.SpeechConfig(
            authorization_token=token,
            endpoint=AZURE_ENDPOINT
        )
        speech_config.speech_recognition_language = "en-US"
        print("SUCCESS: Azure Speech Services configuration created")
        return speech_config
    except Exception as e:
        raise Exception(f"Failed to create speech config: {e}")

# Initialize speech config globally
speech_config = create_azure_speech_config()

# CELL 6: MP3 Processing Functions
def get_mp3_duration(mp3_file_path):
    """Get MP3 duration without conversion"""
    try:
        duration = librosa.get_duration(path=mp3_file_path)
        return duration
    except Exception as e:
        print(f"Warning: Could not get duration: {e}")
        return 0.0

def transcribe_mp3_directly(mp3_file_path):
    """Transcribe MP3 file directly using Azure Speech Service"""
    try:
        # Create audio config directly with MP3 file
        audio_config = speechsdk.AudioConfig(filename=mp3_file_path)
        
        # Create recognizer with global speech_config
        recognizer = speechsdk.SpeechRecognizer(
            speech_config=speech_config, 
            audio_config=audio_config
        )
        
        # Storage for transcript parts
        transcript_parts = []
        done = threading.Event()
        error_occurred = False
        error_message = ""

        def on_recognized(evt):
            if evt.result.text:
                transcript_parts.append(evt.result.text)

        def on_session_stopped(evt):
            done.set()

        def on_canceled(evt):
            nonlocal error_occurred, error_message
            error_occurred = True
            error_message = f"Transcription canceled: {evt.reason}"
            if evt.reason == speechsdk.CancellationReason.Error:
                error_message += f" - Error details: {evt.error_details}"
            done.set()

        # Connect event handlers
        recognizer.recognized.connect(on_recognized)
        recognizer.session_stopped.connect(on_session_stopped)
        recognizer.canceled.connect(on_canceled)

        # Start transcription
        recognizer.start_continuous_recognition()
        done.wait()
        recognizer.stop_continuous_recognition()

        # Check for errors
        if error_occurred:
            raise Exception(error_message)

        # Combine transcript parts
        full_transcript = " ".join(transcript_parts).strip()
        if not full_transcript:
            raise Exception("No speech detected in audio file")

        return full_transcript

    except Exception as e:
        raise Exception(f"MP3 transcription failed: {e}")

# CELL 7: Main Processing Function
def process_mp3_file(mp3_file_path):
    """Complete MP3 processing pipeline - Returns DataFrame for automatic saving"""
    start_time = time.time()

    try:
        print("MP3 TRANSCRIPTION PIPELINE STARTED")

        # Step 1: Validate input file
        if not os.path.exists(mp3_file_path):
            raise Exception(f"MP3 file not found: {mp3_file_path}")
        if not mp3_file_path.lower().endswith('.mp3'):
            raise Exception("File must be in MP3 format")

        # Step 2: Extract file info
        file_name = Path(mp3_file_path).name
        file_size = os.path.getsize(mp3_file_path) / (1024 * 1024)  # MB

        print(f"File: {file_name}")
        print(f"Size: {file_size:.2f} MB")

        # Step 3: Get MP3 duration
        duration = get_mp3_duration(mp3_file_path)

        # Step 4: Transcribe MP3 directly
        transcript = transcribe_mp3_directly(mp3_file_path)

        # Step 5: Prepare data for saving
        processing_time = time.time() - start_time
        
        data = [[
            file_name,
            transcript,
            len(transcript),
            round(duration, 2),
            round(file_size, 2),
            round(processing_time, 2),
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ]]
        
        columns = [
            "file_name", "transcript", "transcript_length", 
            "duration_seconds", "file_size_mb", "processing_time_seconds", 
            "timestamp"
        ]
        
        # Create and return DataFrame
        pandas_df = pd.DataFrame(data, columns=columns)
        spark_df = spark.createDataFrame(pandas_df)

        return spark_df

    except Exception as e:
        print(f"An error occurred: {e}")
        return None

# CELL 8: Execute Pipeline and Save Automatically
try:
    # Initialize Spark session
    spark = SparkSession.builder.getOrCreate()

    # Set your MP3 file path
    mp3_file_path = "/Workspace/Users/anuj.b.s@mughalvaren.com/sample-ppt/audio/presentation_script/1_user_say/mygov_1.mp3"

    # Validate file exists before processing
    if not os.path.exists(mp3_file_path):
        print(f"ERROR: File not found: {mp3_file_path}")
        print("Please check your file path and try again.")
    else:
        # Run the pipeline
        result = process_mp3_file(mp3_file_path)

        if result is not None:
            # Display result
            display(result)

            # Automatically save to catalog
            result.write.mode("append").saveAsTable("audio_transcripts")

            # Completion message
            print("MP3 transcript pipeline completed")
        else:
            print("Pipeline failed - check error messages above")

except Exception as e:
    print(f"Pipeline execution error: {str(e)}")
    print("Please check your configuration and try again.")
