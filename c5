def convert_time_zone_with_label(df, source_zone, target_zone):
    """
    Convert times from source timezone to target timezone.
    If both are same, just adds timezone label without conversion.
    """
    # UTC offsets for all supported timezones
    time_zones_utc = {
        "HKT": 8,      # Hong Kong Time (UTC+8)
        "IST": 5.5,    # Indian Standard Time (UTC+5:30)
        "CET": 1,      # Central European Time (UTC+1)
        "CEST": 2      # Central European Summer Time (UTC+2)
    }
    
    # Extract timezone codes from full names
    source_zone = source_zone.split()[0]  # "HKT (Hong Kong Time)" → "HKT"
    target_zone = target_zone.split()[0]  # "IST (Indian Standard Time)" → "IST"
    
    logger.info(f"Converting from {source_zone} to {target_zone}")
    
    # If source and target are same, just add label
    if source_zone == target_zone:
        def add_label(time_str):
            return f"{time_str} {target_zone}"
        
        new_df = df.copy()
        new_df['start_time'] = new_df['start_time'].apply(add_label)
        logger.info("Same timezone - only label added")
        return new_df
    
    # Validate timezones
    if source_zone not in time_zones_utc:
        raise ValueError(f"Unsupported source timezone: {source_zone}")
    if target_zone not in time_zones_utc:
        raise ValueError(f"Unsupported target timezone: {target_zone}")
    
    # Calculate time difference
    source_utc_offset = time_zones_utc[source_zone]
    target_utc_offset = time_zones_utc[target_zone]
    time_difference = timedelta(hours=(target_utc_offset - source_utc_offset))
    
    logger.info(f"Time difference: {time_difference}")
    
    def convert_time(time_str):
        # Parse the time (format: "HH:MM")
        time_obj = datetime.strptime(time_str, "%H:%M")
        # Apply conversion
        converted_time = time_obj + time_difference
        # Return with timezone label
        return f"{converted_time.strftime('%H:%M')} {target_zone}"
    
    new_df = df.copy()
    new_df['start_time'] = new_df['start_time'].apply(convert_time)
    logger.info("Timezone conversion completed")
    return new_df
