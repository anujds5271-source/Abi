# ALL CELLS IN ONE - Complete Working MP3 Transcription Code

# Install packages
pip install azure-cognitiveservices-speech azure-identity

# Import libraries
import os
import time
import threading
from pathlib import Path
import azure.cognitiveservices.speech as speechsdk
from pyspark.sql import SparkSession
from datetime import datetime
import pandas as pd

print("‚úÖ All libraries loaded")

# Azure configuration
AZURE_ENDPOINT = "https://dahiwade-openai-0397ab9d9c6b4f1fae9f4b4d81.cognitiveservices.azure.com/"
TENANT_ID = "1f656ea2-a5d8-4b93-8dc6-4fd7e59e0d5a"
CLIENT_ID = "895f21a2-183c-4e35-80a3-e3c9de56e45e"
CLIENT_SECRET = dbutils.secrets.get(scope="databricksScope", key="svc-b-a1-d-930710-ana-aadappClientapi")

print("‚úÖ Azure config loaded")

# Create speech config
def create_speech_config():
    try:
        speech_config = speechsdk.SpeechConfig(
            subscription=CLIENT_SECRET,
            region="eastus"
        )
        speech_config.speech_recognition_language = "en-US"
        print("‚úÖ Speech config created")
        return speech_config
    except Exception as e:
        print(f"‚ùå Speech config failed: {e}")
        return None

speech_config = create_speech_config()

# Simple transcription function
def transcribe_mp3_simple(mp3_path):
    if not speech_config:
        return "Azure Speech not configured"
    
    try:
        print("üé§ Starting transcription...")
        audio_config = speechsdk.AudioConfig(filename=mp3_path)
        recognizer = speechsdk.SpeechRecognizer(
            speech_config=speech_config, 
            audio_config=audio_config
        )
        
        result = recognizer.recognize_once()
        
        if result.reason == speechsdk.ResultReason.RecognizedSpeech:
            print("‚úÖ Transcription successful")
            return result.text
        else:
            return f"Recognition failed: {result.reason}"
            
    except Exception as e:
        return f"Transcription error: {str(e)}"

# Initialize Spark
spark = SparkSession.builder.getOrCreate()
print("‚úÖ Spark initialized")

# üëá PUT YOUR MP3 FILE PATH HERE üëá
mp3_path = "/Workspace/Users/anuj.b.s@mughalvaren.com/sample-ppt/audio/presentation_script/1_user_say/mygov_1.mp3"

# Get filename automatically
filename = Path(mp3_path).name

# Get real transcript
transcript = transcribe_mp3_simple(mp3_path)

# Create result DataFrame
data = [[filename, transcript]]
result = spark.createDataFrame(data, ["filename", "transcript"])

# Display table
display(result)

# Save to catalog
result.write.mode("append").saveAsTable("mp3_audio_parser")

print(f"‚úÖ Saved {filename} to mp3_audio_parser table!")