# =============================================================================
# DIRECT MP3 TRANSCRIPTION - NO CONVERSION NEEDED
# Based on your original structure but works directly with MP3
# =============================================================================

# CELL 1: Restart Environment
%restart_python

# CELL 2: Install Only What We Need (Much Simpler)
pip install requests pandas

# CELL 3: Import Libraries (Minimal)
import requests
import json
import os
import time
from pathlib import Path
import pandas as pd
from pyspark.sql import SparkSession
from datetime import datetime

print("SUCCESS: All libraries loaded")

# CELL 4: Azure Configuration (Same Structure as Your Original)
# Your Azure Speech Service credentials
AZURE_SPEECH_KEY = "your-speech-subscription-key"  # UPDATE THIS
AZURE_REGION = "centralindia"  # UPDATE THIS

print("SUCCESS: Azure configuration loaded")

# CELL 5: Direct MP3 Transcription Function (No Conversion!)
def transcribe_mp3_direct(mp3_file_path, speech_key, region, language="en-US"):
    """
    Transcribe MP3 directly using Azure Fast Transcription API
    NO CONVERSION NEEDED - Works directly with MP3!
    """
    
    # Check if file exists
    if not os.path.exists(mp3_file_path):
        raise Exception(f"MP3 file not found: {mp3_file_path}")
    
    # Check file size (API limit: 300MB)
    file_size_mb = os.path.getsize(mp3_file_path) / (1024 * 1024)
    if file_size_mb > 300:
        raise Exception(f"File too large: {file_size_mb:.2f}MB (max 300MB)")
    
    print(f"Processing MP3 directly: {Path(mp3_file_path).name}")
    print(f"File size: {file_size_mb:.2f} MB")
    
    # API endpoint for direct MP3 transcription
    url = f"https://{region}.api.cognitive.microsoft.com/speechtotext/transcriptions:transcribe?api-version=2024-11-15"
    
    # Headers
    headers = {
        'Ocp-Apim-Subscription-Key': speech_key
    }
    
    # Request definition
    definition = {
        "locales": [language]
    }
    
    # Prepare multipart form data with MP3 file
    files = {
        'audio': open(mp3_file_path, 'rb'),
        'definition': (None, json.dumps(definition))
    }
    
    try:
        print("Starting direct MP3 transcription...")
        start_time = time.time()
        
        # Make API call with MP3 file directly
        response = requests.post(url, headers=headers, files=files)
        
        processing_time = time.time() - start_time
        
        if response.status_code == 200:
            result = response.json()
            
            # Extract transcript from response
            transcript = ""
            if 'recognizedPhrases' in result:
                transcript_parts = []
                for phrase in result['recognizedPhrases']:
                    if phrase.get('nBest') and len(phrase['nBest']) > 0:
                        transcript_parts.append(phrase['nBest'][0]['display'])
                transcript = " ".join(transcript_parts)
            
            if transcript:
                print(f"SUCCESS: Direct MP3 transcription completed in {processing_time:.2f} seconds")
                print(f"Transcript length: {len(transcript)} characters")
                return transcript
            else:
                raise Exception("No speech detected in audio file")
                
        else:
            error_msg = f"API Error {response.status_code}: {response.text}"
            print(f"ERROR: {error_msg}")
            raise Exception(error_msg)
            
    except Exception as e:
        print(f"ERROR: Direct MP3 transcription failed - {str(e)}")
        raise
    finally:
        files['audio'].close()

# CELL 6: Process MP3 File (Same Structure as Your Original, No Conversion)
def process_mp3_file(mp3_file_path):
    start_time = time.time()

    try:
        print("DIRECT MP3 TRANSCRIPTION PIPELINE STARTED")
        print("=" * 50)

        # Step 1: Validate file (same as your original)
        if not os.path.exists(mp3_file_path):
            raise Exception(f"MP3 file not found: {mp3_file_path}")
        if not mp3_file_path.lower().endswith('.mp3'):
            raise Exception("File must be in MP3 format")

        # Step 2: Get file info (same as your original)
        file_name = Path(mp3_file_path).name
        file_size = os.path.getsize(mp3_file_path) / (1024 * 1024)

        print(f"File: {file_name}")
        print(f"Size: {file_size:.2f} MB")

        # Step 3: Direct MP3 transcription (NO CONVERSION!)
        transcript = transcribe_mp3_direct(mp3_file_path, AZURE_SPEECH_KEY, AZURE_REGION)

        # Step 4: Prepare data (same as your original)
        processing_time = time.time() - start_time
        
        data = [[
            file_name,
            transcript,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ]]
        
        columns = ["file_name", "transcript", "timestamp"]
        audio_df = pd.DataFrame(data, columns=columns)

        # Step 5: Create Spark DataFrame (same as your original)
        spark = SparkSession.builder.getOrCreate()
        df = spark.createDataFrame(audio_df)

        print("=" * 50)
        print("DIRECT MP3 TRANSCRIPTION COMPLETED")
        print(f"File: {file_name}")
        print(f"Processing time: {processing_time:.2f} seconds")
        print(f"Transcript length: {len(transcript)} characters")
        print("NO CONVERSION WAS NEEDED!")
        print("=" * 50)

        return df

    except Exception as e:
        print(f"ERROR: Pipeline failed - {str(e)}")
        return None

# CELL 7: Execute Pipeline (Same as Your Original Structure)
# =============================================================================
# UPDATE THESE WITH YOUR CREDENTIALS
# =============================================================================

# If you want to use your existing credentials from your original code:
# AZURE_SPEECH_KEY = dbutils.secrets.get("databricksScope", "your-speech-key")
# AZURE_REGION = "centralindia"

# Or direct values:
AZURE_SPEECH_KEY = "your-speech-subscription-key-here"  # UPDATE THIS
AZURE_REGION = "centralindia"  # UPDATE THIS

# Your MP3 file path (exactly same as your original)
mp3_file_path = "/Workspace/Users/anuj.b.s@mughalvaren.com/sample-ppt/audio/presentation_script/1_user_say/mygov_1.mp3"

# Process the file directly (same structure as your original)
print("Starting DIRECT MP3 transcription pipeline...")
result = process_mp3_file(mp3_file_path)

if result is not None:
    # Display results (same as your original)
    print("DISPLAYING RESULTS:")
    display(result)
    
    # Save to table (same as your original)
    result.write.mode("append").saveAsTable("audio_transcripts")
    print("SUCCESS: Data saved to audio_transcripts table")
    
    # Show transcript preview (same as your original)
    transcript_row = result.select("transcript").collect()[0]
    transcript_text = transcript_row["transcript"]
    
    print("\nTRANSCRIPT PREVIEW:")
    print("-" * 40)
    preview = transcript_text[:200] + "..." if len(transcript_text) > 200 else transcript_text
    print(preview)
    print("-" * 40)
    
else:
    print("FAILED: Could not process MP3 file")

print("Direct MP3 transcription pipeline completed - NO CONVERSION NEEDED!")

# CELL 8: Verification (Same as Your Original)
try:
    verification_df = spark.sql("SELECT * FROM audio_transcripts ORDER BY timestamp DESC LIMIT 3")
    print("\nVERIFICATION: Latest transcription results")
    display(verification_df)
except Exception as e:
    print(f"Note: Could not verify results - {e}")

print("\nYour DIRECT MP3 pipeline is ready - no conversion required!")
